Lab 03
====================================================


After the method ``F``
finishes executing from inside ::

	Console.WriteLine(F(3));

it is as if the statement temporarily became ::

	Console.WriteLine(9);

and similarly when executing ::

	Console.WriteLine(F(3) + F(4)); 

the interpreter first evaluates F(3) and effectively replaces the
call by the returned result, 9, as if the statement temporarily
became ::

	Console.WriteLine(9 + F(4));


and then the interpreter evaluates F(4) and effectively replaces
the call by the returned result, 16, as if the statement
temporarily became ::

	Console.WriteLine(9 + 16);

resulting finally in 25 being calculated and printed.

C# methods can return any type of data, not just numbers, and
there can be any number of statements executed before the return
statement. Read, follow, and run the example program
:file:`return2.cs`:



Many have a hard time following the flow of execution with methods.
Even more is involved when there are return values.  
Make sure you completely follow the details of the execution:

#. Lines 12: Start at Main

#. Line 14: call the method, remembering where to return

#. Line 5: pass the parameters: ``firstName = "Benjamin"``;
   ``lastName = "Franklin"``

#. Line 7: Assign the variable ``separator`` the value ``", "``

#. Line 8: Assign the variable ``result`` the value of 
   ``lastName + separator + firstName`` which is  
   ``"Franklin" + ", " + "Benjamin"``, which evaluates to
   ``"Franklin, Benjamin"``

#. Line 9: Return ``"Franklin, Benjamin"``

#. Line 14: Use the value returned from the method call so the line
   effectively becomes  ``Console.WriteLine("Franklin, Benjamin");``, 
   so print it.

#. Line 15: call the method with the new actual parameters,
   remembering where to return

#. Line 5: pass the parameters: ``firstName = "Andrew"``;
   ``lastName = "Harrington"``

#. Lines 7-9: ... calculate and return ``"Harrington, Andrew"``

#. Line 15: Use the value returned by the method and print
   ``"Harrington, Andrew"``

Compare :repsrc:`return2/return2.cs` and :repsrc:`addition1/addition1.cs`, 
from the previous
section. Both use methods. Both print, but where the printing *is
done* differs. The method ``SumProblem`` prints directly inside
the method and returns nothing. On the other hand
``LastFirst`` does not print anything but returns a string. The
caller gets to decide what to do with the returned string, and above it is
printed in ``Main``.

.. index:: example; addition2.cs
   addition2.cs example
   
In general methods should do a single thing.
You can easily combine a sequence of methods, and you have more
flexibility in the combinations
if each does just one unified thing.  The method
SumProblem in :repsrc:`addition1/addition1.cs` does two thing:  
It creates a sentence,
and prints it.  If that is all you have, you are out of luck if you want
to do something different with the sentence string.  A better approach is
to have a method that just creates the sentence, and returns it for
whatever further use you want.  After returning that value,
printing is one possibility, done in
:repsrc:`addition2/addition2.cs`:

.. :: ../../examples/introcs/addition2/addition2.cs

This example constructs the sentence using the string ``+`` operator.
Generating a string with substitutions using a format string 
in ``Console.Write`` is neater, but 
we are forced to directly print the string,
and not remember it for later arbitrary use.  

.. index:: string; Format
   Format method for string

.. _string-format:
   
It is common to want to construct and immediately print a string,
so having ``Console.Write`` is definitely handy when we want it.,
However it is an example of combining two separate steps!  Sometimes
(like here) we just want to have the resulting string, and do something else
with it.  We introduce 
the C# library method  ``string.Format``, which does just what we want:  
The parameters
have the same form as for ``Console.Write``, but the formatted string is
*returned*.

Here is a revised version of the method ``SumProblemString``, 
from example :repsrc:`addition2a/addition2a.cs`:

.. :: ../../examples/introcs/addition2a/addition2a.cs
   :start-after: chunk
   :end-before: chunk
   :dedent: 3

The only caveat with ``string.Format`` is that
there is *no* special method corresponding to ``Console.WriteLine``,
with an automatic terminating newline.
You can generate a newline with string.Format:  Remember the
escape code ``"\n"``.  Put it at the end to go on to a new line.


**In class recommendation**:  Improve example :repsrc:`painting/painting.cs`
with a method used for repeated similar operations.  
Copy it to a file :file:`painting_input.cs` in your
own project and modify it.

.. _InterviewStringEx:
	
Interview String Return Exercise/Example
------------------------------------------

Write a program by that accomplishes the same thing as
`InterviewProblem`, but introduce a method 
``InterviewSentence`` that takes name
and time strings as parameters and returns the interview sentence string.
For practice use ``string.Format`` in the method.  
With this setup you can manage input from the user and output to the
screen entirely in ``Main``, while using ``InterviewSentence`` to generate
the sentence that you want to *later* print. 

(Here we are having you work on getting used to 
method syntax while keeping the
body of your new method very simple.  Combining that with longer, more
realistic method bodies is coming!)

If you want a further example on this idea of returning 
something first and then using the result, 
or if you want to compare your work to ours,
see our solution, :repsrc:`interview2/interview2.cs`.
	
.. _QuotientStringEx:
	
Quotient String Return Exercise
---------------------------------

Create :file:`quotient_return.cs` by modifying :file:`quotient_prob.cs` in
:ref:`QuotientFunctionEx` so that the program accomplishes the same
thing, but everywhere: 

* Change the QuotientProblem method into one
  called ``QuotientString`` that merely *returns* the string rather
  than printing the string directly. 
* Have ``Main`` print
  the result of each call to the ``QuotientString`` method.

Use ``string.Format`` to create the sentence that you return.


Birthday Method Exercise
---------------------------

Make your own further change to :repsrc:`birthday4/birthday4.cs` and save it in your
own project as 
``birthday_many.cs``: Add a method call
(but *not* another method *definition*), so Maria gets a verse, in
addition to Emily and Andre. Also print a blank line between
verses. (There are two ways to handle the blank lines: 
You may *either* do this by adding a print line to the
method definition, *or* by adding a print line between all calls to
the method.  Recall that if you give Console.WriteLine an empty
parameter list, it just goes to the next line.)