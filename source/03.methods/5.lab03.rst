Lab 03
====================================================

Return Statement
-----------------

Perform the following for this part of the lab:

- Copy this code into a project called **Returns**. 
- Run the code
- Study the code and make sure you understand how **every line** of the code works. 
- Write brief comments (after //) at the right of each lines to explain what each line is doing 

You probably have used mathematical functions in algebra class, but
they all had calculated values associated with them. For instance
if you defined 

   F(x)=x\ :sup:`2`

then it follows that F(3) is 3\ :sup:`2` = 9, and F(3)+F(4) is
3\ :sup:`2` + 4\ :sup:`2` = 9 + 16 = 25.

Method calls in expressions get
replaced during evaluation by the value of the method.

The corresponding definition and examples in C# would be the
following:

.. code-block:: 

   using System;           //

   class Return1           //
   {
      static int F(int x)  //
      {
         return x*x;       //
      }

      static void Main()   //
      {
         Console.WriteLine(F(3));         //
         Console.WriteLine(F(3) + F(4));  //
      }
   }

The new C# syntax is the **return statement**, with the word
``return`` followed by an expression. methods that return values
can be used in expressions, just like in math class. When an
expression with a method call is evaluated, the method call is
effectively replaced temporarily by its returned value. Inside the
C# method, the value to be returned is given by the
expression in the ``return`` statement.

Since the method returns data, and all data in C# is typed, 
there must be a type given for the value returned.  Note that the 
method heading does not start with ``static void``.  
In place of ``void`` is ``int``.  The ``void`` in earlier method headings
meant nothing was returned.  The ``int`` here means that a value *is*
returned and its type is ``int``.


After the method ``F``
finishes executing from inside ::

	Console.WriteLine(F(3));

it is as if the statement temporarily became ::

	Console.WriteLine(9);

and similarly when executing ::

	Console.WriteLine(F(3) + F(4)); 

the interpreter first evaluates F(3) and effectively replaces the
call by the returned result, 9, as if the statement temporarily
became ::

	Console.WriteLine(9 + F(4));


and then the interpreter evaluates F(4) and effectively replaces
the call by the returned result, 16, as if the statement
temporarily became ::

	Console.WriteLine(9 + 16);

resulting finally in 25 being calculated and printed.


Return Strings
----------------

C# methods can return any type of data, not just numbers, and
there can be any number of statements executed before the return
statement. Read, follow, and run the example program:

.. code-block:: 

   using System;

   class Return2
   {
      static string LastFirst(string firstName, string lastName)
      {
         string separator = ", ";
         string result = lastName + separator + firstName;
         return result;
      }

      static void Main()
      {
         Console.WriteLine(LastFirst("Benjamin", "Franklin"));
         Console.WriteLine(LastFirst("Andrew", "Harrington"));
      }
   }


Many have a hard time following the flow of execution with methods.
Even more is involved when there are return values. 

   



This example constructs the sentence using the string ``+`` operator.
Generating a string with substitutions using a format string 
in ``Console.Write`` is neater, but 
we are forced to directly print the string,
and not remember it for later arbitrary use.  

.. index:: string; Format
   Format method for string

.. _string-format:
   
It is common to want to construct and immediately print a string,
so having ``Console.Write`` is definitely handy when we want it.,
However it is an example of combining two separate steps!  Sometimes
(like here) we just want to have the resulting string, and do something else
with it.  We introduce 
the C# library method  ``string.Format``, which does just what we want:  
The parameters
have the same form as for ``Console.Write``, but the formatted string is
*returned*.

Here is a revised version of the method ``SumProblemString``, 
from example :repsrc:`addition2a/addition2a.cs`:

.. :: ../../examples/introcs/addition2a/addition2a.cs
   :start-after: chunk
   :end-before: chunk
   :dedent: 3

The only caveat with ``string.Format`` is that
there is *no* special method corresponding to ``Console.WriteLine``,
with an automatic terminating newline.
You can generate a newline with string.Format:  Remember the
escape code ``"\n"``.  Put it at the end to go on to a new line.


**In class recommendation**:  Improve example :repsrc:`painting/painting.cs`
with a method used for repeated similar operations.  
Copy it to a file :file:`painting_input.cs` in your
own project and modify it.

.. _InterviewStringEx:
	
Interview String Return Exercise/Example
------------------------------------------

Write a program by that accomplishes the same thing as
`InterviewProblem`, but introduce a method 
``InterviewSentence`` that takes name
and time strings as parameters and returns the interview sentence string.
For practice use ``string.Format`` in the method.  
With this setup you can manage input from the user and output to the
screen entirely in ``Main``, while using ``InterviewSentence`` to generate
the sentence that you want to *later* print. 

(Here we are having you work on getting used to 
method syntax while keeping the
body of your new method very simple.  Combining that with longer, more
realistic method bodies is coming!)

If you want a further example on this idea of returning 
something first and then using the result, 
or if you want to compare your work to ours,
see our solution, :repsrc:`interview2/interview2.cs`.
	
.. _QuotientStringEx:
	
Quotient String Return Exercise
---------------------------------

Create :file:`quotient_return.cs` by modifying :file:`quotient_prob.cs` in
:ref:`QuotientFunctionEx` so that the program accomplishes the same
thing, but everywhere: 

* Change the QuotientProblem method into one
  called ``QuotientString`` that merely *returns* the string rather
  than printing the string directly. 
* Have ``Main`` print
  the result of each call to the ``QuotientString`` method.

Use ``string.Format`` to create the sentence that you return.


Birthday Method Exercise
---------------------------

Make your own further change to :repsrc:`birthday4/birthday4.cs` and save it in your
own project as 
``birthday_many.cs``: Add a method call
(but *not* another method *definition*), so Maria gets a verse, in
addition to Emily and Andre. Also print a blank line between
verses. (There are two ways to handle the blank lines: 
You may *either* do this by adding a print line to the
method definition, *or* by adding a print line between all calls to
the method.  Recall that if you give Console.WriteLine an empty
parameter list, it just goes to the next line.)