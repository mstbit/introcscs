.. index:: file (StreamWriter); stream abstraction
   stream

.. _fileabstraction:

Files As Streams
============================ 


In most real world scenarios, especially in business settings, operations carried 
out with computers and information systems usually involve data processing and  
may generate new data as a result. To make the data *persistent* past the end of 
program execution, data are stored  in file system or databases (for structured data). 

A file is a collection of data stored on in a storage device with a name and 
directory path information. A file is stored in your file system, which is part of 
the operating system (OS), and the OS therefore has the information about the file 
and how to access it. 

File Stream
--------------

When you read/write a file in C# program, the data processed is seen as a **Stream**.
A stream is a sequence of bytes of data sent between the destination and the source of 
the file. Streams are how data is read and written to and from files, networks, and 
computer memory. For example, printing data using a printer involves sending a sequence 
of bytes of data to a stream associated with a network port connected to the printer. 

Different task processes use different type of streams: text files, binary files, 
strings, and network communications are some of the examples. The basic operations with 
streams include the following:

#. Creation/Opening: 
#. Reading: 
#. Writing: 
#. Positioning: 
#. Closing: 


gradually, line by line, or all together.  

C# has the abstraction of a *stream*, 
as a sequence of characters to be processed sequentially.
A stream can either be written sequentially or read sequentially.
You have already read and written streams of 
characters to the Console.  Most of the syntax that we use for files will be very similar,
using methods ``ReadLine``, ``WriteLine``, and ``Write`` in the same way you
used them for the ``Console``.

Files can be handled very differently by different operating systems, but
C# abstracts away the differences and provides stream interfaces between
a C# program and files.
