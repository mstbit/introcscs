Chapter Review 
=========================

#.  Distinguish the cases when you would want to use a list instead of an array, or 
    the other way around.

#.  What syntax is consistent between arrays and lists?  What are comparable
    features, but with different syntax?

#. Here is one way to put five particular elements into a list:

    .. code-block:: 
        
        var words = new List<string>();
        string[] temp = {"a", "an", "the", "on", "of"};
        foreach(string s in temp) {
            words.Add(s);
        }

    How can you do this all without a loop, and with only two statements? 
    How about with a single statement, assuming you do not need temp again?

#.  If we continue on from above, with the line::

        var words2 = words;
        
    Then what would be the difference in effect between these two possible next
    lines?   ::
    
        words.Clear()
        
        words = new List<string>();   
        
    
#.  If you delete an element from the middle of a list, what happens to the
    spot where you removed the element?

#.  Which is true for a ``Dictionary``: is it mutable or immutable?

#.  Though for some collections, like arrays and lists,
    you can fairly easily replace a ``foreach`` 
    loop with a ``for`` loop, that is not the case if you want to iterate
    through a ``Dictionary``.  How do you go through all the keys in
    a ``Dictionary``?
    
#.  What syntax is there for a ``Dictionary`` that matches that for a ``List``?

#.  How is a ``Dictionary`` like an array?  How is it different?

#.  ``Dictionary`` values are of arbitrary type. What is the restriction on 
    key types?

    
   

