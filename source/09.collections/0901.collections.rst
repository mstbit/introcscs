
Collections
=============

.. note:: 
    Some descriptions in this chapter use the term classes. They refer to 
    existing code and tools provided in C# for you to use.  

When it comes to the creation and management of groups of items, there are two ways to 
handle the items: arrays and collections. In terms of data structures, collections are 
similar to arrays, but they are designed to be more effective in the organization, store, 
and modification of data. For example, adding, deleting, discovering, and inserting 
of data into the collections are parts of the data manipulation of collection classes.

The .NET runtime provides many collection types that store and manage groups of 
related objects. Some of the collection types, such as ``System.Array``, are 
recognized in the C# language. In addition, interfaces like 
System.Collections.Generic.IEnumerable<T> are recognized in the language for 
enumerating the elements of a collection.

Collections provide a flexible way to work with groups of objects. You can 
classify different collections by these characteristics:

- **Element access**: Every collection can be ``enumerated`` to access each element in 
  order. You choose between these collection types based on how your app accesses elements:
  
  - **Index**: Some collections access elements by *index*, the element's position in an 
    ordered collection. The most common example is list (System.Collections.Generic.List<T>). 
  - **Key**: Other collections access elements by *key*, where a value is associated 
    with a single key. The most common example is dictionary 
    (System.Collections.Generic.Dictionary<TKey,TValue>). 
    
- **Performance profile**: Every collection has different performance profiles for 
  actions like adding an element, finding an element, or removing an element. You can pick a collection type based on the operations used most in your app.
- **Grow and shrink dynamically**: Most collections support adding or removing 
  elements dynamically. Notably, Array doesn't.