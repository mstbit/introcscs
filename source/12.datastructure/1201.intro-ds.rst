Introduction
==============


The term "data structure" could mean any structure (such as a list, array, tree, 
dictionary, etc) that stores data. You can say that a class as simple as an employee 
object storing employee-specific data is a structure. Academically, it is common 
to more focus on data structure as a data organization and storage format (hash, array, etc) 
that is usually chosen for efficient access to data. A data structure, therefore, 
is a collection of data values, the relationship among them, and the functions 
or operations that can be applied to them. [#data-structure-wiki]_  

However when we talk about data structures, we are often referring to commonly  
structured sets of data, and they are sometimes called "collections". Collections 
are sets of data. They can include lists, dictionaries, trees, etc. From the 
implementation perspective, a collection is an ``abstract data type`` that is 
a grouping of items of often the same data type such as string or integer. 

In NET, the namespace (and hence types) that store the sets of data is System.Collections. 
Therefore in NET we tend to use the term collections for any of the data structures 
used to store sets of data, including arrays. [#data_structure-vs-collection]_ 

Microsoft, from the implementation perspective, equates collections as data structure by 
saying that: [#microsoft-collections-and-data_structure]_

| Similar data can often be handled more efficiently when stored and 
| manipulated as a collection. You can use the System.Array class or the classes 
| in the System.Collections, System.Collections.Generic, System.Collections.Concurrent, 
| and System.Collections.Immutable namespaces to add, remove, and modify either 
| individual elements or a range of elements in a collection.


C# Collections
----------------

According to the C# language reference, [#csharp-collections]_

| The .NET runtime provides many collection types that store and manage groups of 
| related objects. Some of the collection types, such as System.Array, System.Span<T>, 
| and System.Memory<T> are recognized in the C# language. In addition, interfaces 
| like System.Collections.Generic.IEnumerable<T> are recognized in the language for 
| enumerating the elements of a collection.

Collection types represent different ways to collect data, such as hash tables, queues, 
stacks, bags, dictionaries, and lists. Commonly used collection types may be grouped 
into two groups:

- Indexable collections: such as List that base on the List<T> class. 
- Key/value pair collections: such as Dictionary that bases on the Dictionary<TKey,TValue> class. 


.. rubric:: Footnotes

.. [#data-structure-wiki] See, e.g., the Data structure `Wikipedia entry <https://en.wikipedia.org/wiki/Data_structure>`_. 
.. [#data_structure-vs-collection] See a Q&A discussion at `Microsoft <https://learn.microsoft.com/en-us/answers/questions/1522979/difference-between-data-structure-and-collection-i>`_
.. [#microsoft-collections-and-data_structure] In the .NET fundamentals documentation, the term "data structures" only appears in the article title `Collections and Data Structure <https://learn.microsoft.com/en-us/dotnet/standard/collections/>`_ 
.. [#csharp-collections] See C# language reference: `Collections <https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/collections>`_
