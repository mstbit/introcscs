
Iteration
============================ 

Iteration, or looping, is one of the three basic constructs in computer 
programming. The basic purpose of iteration is code repetition, which 
humans usually find difficult but comes very easy for computers. After 
starting, the repetitive execution of a block of code or a set of 
instructions/statements will not stop until certain criterion is met. 
The termination of iteration can be either **count**-controlled (for loops) 
or **condition**-controlled (while loops). In general, when you know 
exactly how many times you are going to loop through a 
block of code, you use the ``for`` loop; otherwise, you would choose a ``while`` loop.

The need for code repetition can be seen from the following code::

  using System;
  namespace IntroCSCS
  {
      internal class Chapter05
      {
          static void Main(string[] args)
          {
              Console.Write("1 ");
              Console.Write("2 ");
              Console.Write("3 ");
              Console.Write("4 ");
              Console.Write("5 ");
              Console.Write("6 ");
              Console.Write("7 ");
              Console.Write("8 ");
              Console.Write("9 ");
              Console.Write("10 ");
          }
      }
  }

Obviously, to code the print statement repetitively for 10 times is not a efficient use 
of time for a developer, not to mention the repetition could go for more than 10 times. 


C# Iteration Statements
-------------------------

The C# language reference states that iteration statements include ``for``, ``foreach``, 
``do``, and ``while`` and that the iteration statements "repeatedly execute a 
statement or a block of statements": [#iteration]_

- The ``for`` statement executes its body of an iteration statement while a specified 
  Boolean expression evaluates to true. 
- The ``foreach`` statement enumerates the elements of a collection and executes 
  its body for each element of the collection. 
- The ``do`` statement conditionally executes its body one or more times. 
- The ``while`` statement conditionally executes its body zero or more times.

As a solution to the preceding code repetition problem, a ``for`` loop can be used as below. 
Comparing the highlighted for statement with the, you can see the need for iteration.  

.. code-block:: csharp
  :linenos:
  :emphasize-lines: 13-16

  using System;
  namespace IntroCSCS
  {
    internal class Chapter05
    {
        private static void Main(string[] args)
        {
            CountToThen();
        }

        static void CountToThen()
        {
            for (int i = 1; i <= 10; i = i + 1)
            {
                Console.Write(i + " ");
            }
            Console.WriteLine();
        }
    }
  }



``break`` and ``continue``
---------------------------

``break`` and ``continue`` are two jump statements (out of four, see: :ref:`statements`) in C# 
that transfer the control of code execution flow. The break statement terminates the closest enclosing 
iteration statement (for, foreach, while, or do loop) or switch statement. 
The continue statement starts a new iteration of the closest enclosing iteration statement 
(for, foreach, while, or do loop). 

- with the ``break`` statement, you can break out of the loop. 
- with the ``continue`` statement, you can step to the next iteration in the loop.














.. rubric:: Footnotes

.. [#iteration] See: C# Language Reference: `Iteration statements - for, foreach, do, and while <https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements>`_

