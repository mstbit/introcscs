.. index:: labs; for loops

.. _lab-for-loops:
   
Lab: for Loops
================

- Note that the course policy is that you should not use generative AI 
  without authorization. If you are suspected to have used generative AI 
  and not able to explain/reproduce your work when requested, all your 
  related assignments throughout the semester will be regraded as 0.

#. Create a dotnet console app project (:ref:`create-project`) in your *USERNAME*/workspace/introcscs directory 
   called **Ch05ForLoop** (except for 5.5.1. Loop Lab, in which you create another project). 
#. Prepare your code in VS Code. 
#. Use the file Program.cs to code.    
#. The namespace of this project is *IntroCSCS*. 
#. The class name of this project is *Ch05ForLoop*. 
#. When executing code, you will only use the Main() method in class *Ch05ForLoop*. 
#. You will prepare methods in the proper class to be called from 
   the Main() method. 
#. Use a Word document to prepare your assignment. 
#. Number the questions and **annotate** your answers (using //), when appropriate, to show your understanding. 
#. Paste your screenshots of your code in VS Code (including namespace and class 
   name) and the results of execution (**command prompt** and **username** are part of the execution). 


Goals for this lab:

- Practice with loops. You are encouraged to use a ``for`` loop where appropriate.
- Use nested loops where appropriate.


Loop Lab (in-class)
--------------------

Copy example :repsrc:`loop_lab_stub/loop_lab.cs` to a new project of yours, call it 
"Ch05ForLoopLab":

   #. Create your Ch05ForLoopLab project folder in *USERNAME*/workspace/introcscs.
   #. Create your project (``dotnet new console``) in the Ch05ForLoopLab project folder.
   #. ``code .`` + Enter from within the Ch05ForLoopLab directory. 
   #. Go to :repsrc:`loop_lab_stub/loop_lab.cs` and ``Copy raw file``.
   #. Paste the content of loop_lab.cs to Program.cs. (You do not need the Hello World! code)
   #. Change the namespace to IntroCSCS. 
   #. Start working on the methods. 
   #. Change the #10 ``UI.PromptIntInRange`` method to a prompt line and a Console.ReadLine() user input saving to ``int n``. 
   #. Change the #11 ``UI.PromptLine`` method to a prompt line and a Console.ReadLine() user input saving to ``string s``. 
   #. You may find the UI methods `here <https://github.com/mstbit/introcs-csharp-examples/blob/master/ui/ui.cs>`

Your tasks is to Fill in method bodies for each part below: 

.. index:: PrintReps

#.  Complete  

    .. literalinclude:: ../../examples/introcs/loop_lab_stub/loop_lab.cs
       :start-after: PrintReps chunk
       :end-before: body
       :dedent: 6

    Hint:  How would you do something like the example
    ``PrintReps("Ok", 9)`` or with a higher count by hand?  
    Probably count under your breath as you write:
    
    .. code-block:: none

        1 2 3 4 5 6 7 8 9
       OkOkOkOkOkOkOkOkOk
    
    This is a counting loop.
    

    .. index:: StringOfReps
    
#.  Complete  

    .. literalinclude:: ../../examples/introcs/loop_lab_stub/loop_lab.cs
       :start-after: StringOfReps chunk
       :end-before: body
       :dedent: 6

    Note the distinction from the previous part:  Here the function prints nothing.
    Its work is *returned* as a single string.  You have to build up the final
    string.
    
    .. index:: Factorial
    
#.  Complete ``Factorial``, in a format much like SumToN in example 
    :repsrc:`sum_to_n_test/sum_to_n_test.cs`:  
    
    .. literalinclude:: ../../examples/introcs/loop_lab_stub/loop_lab.cs
       :start-after: Factorial chunk
       :end-before: body
       :dedent: 6
    
    It is useful to think of the sequence of steps to calculate a 
    concrete example of a factorial, say 6!:
    
    .. code-block:: none

       Start with 1
       2 *1 = 2
       3*2 = 6
       4 * 6 = 24
       5*24 = 120
       6*120 = 720

    **ALSO** find the largest value of ``n`` for which the function works.
    (You might want to add a bit of code further testing Factorial,
    to make this easier.)  Caution:  although a negative result from the 
    product of two positive numbers is clearly wrong, only half of the
    allowed values are negative, so the first wrong answer could equally well
    be positive.
    
#.  Modify the function to return a ``long``.  
    Then what is the largest value of ``n`` for which the function works?
    
    *Remember the values from this part and the previous part*
    *to tell the TA's checking out your work.*

    .. index:: PrintRectangle
      
#.  Complete the method

    .. literalinclude:: ../../examples/introcs/loop_lab_stub/loop_lab.cs
       :start-after: PrintRectangle chunk
       :end-before: body
       :dedent: 6
    
    Here are further examples::
        
        PrintRectangle(5, 1, ' ', 'B');
        PrintRectangle(0, 2, '-', '+');
    
    would print
    
    .. code-block:: none

       BBBBBBB
       B     B
       BBBBBBB
       ++
       ++
       ++
       ++
    
    Suggestion:  You are always encouraged to build up to a complicated solution 
    incrementally.
    You might start by just creating the inner rectangle, without the border.

#.  Complete the method below.  

    .. literalinclude:: ../../examples/introcs/loop_lab_stub/loop_lab.cs
       :start-after: PrintTableBorders chunk
       :end-before: body
       :dedent: 6
    
    Here is further example::
        
        PrintTableBorders(2, 1, 6, 3);
    
    would print (with actual vertical bars)
    
    .. code-block:: none

       +------+------+
       |      |      |
       |      |      |
       |      |      |
       +------+------+
    
    You can do this with lots of nested loops, 
    or much more simply you can use ``StringOfReps``, possibly six times
    in several assignment statements, 
    and print a single string.  Think of larger and larger building blocks.
   
    The source of this book is plain text where some of the tables are laid out
    in a format similar to the output of this function.  The Emacs editor 
    has a mode that maintains
    a fancier related setup on the screen, on the fly,
    as content is added inside the cells!
   



.. index:: Random; static variable
.. index:: Random; heads or tails exercise
   exercise; heads or tails
   heads or tails exercise
   
.. _head_tails_exercise:

Head or Tails 
---------------

Write a program ``heads_tails.cs``. It should include a function ``Flip()``,
that will just randomly print ``Heads`` or ``Tails`` *once*.
Accomplish this by choosing 0 or 1 arbitrarily with a random
number generator.  More details follow.
 
Use a ``Random`` object, as in :ref:`lab-number-game`, *except* this time it is 
important *not* to make the ``Random`` object be a local variable inside 
the ``Flip`` function:  A new ``Random`` object in likely 
initialized using the current time.  The ``Flip`` function has no interaction 
with the user,
so it can be repeated very quickly, and new ``Random`` objects
may not register a new value
through several reruns of ``Flip``.  This would give the same answer, 
and be completely contrary to the idea of random results!

Hence it is generally a good idea to only create a single ``Random`` object
that stays in scope for the whole program.
One way to do that is to make it *static*.  Place the declaration ::

  static Random r = new Random();

inside your class but outside of any function, positioned like 
the static constants discussed in :ref:`Static-Variables`.
  
Then you can use ``r`` in any function in your class.  
For ``int`` variables ``low`` and ``higher``, with ``low < higher``::
 
    int n = r.Next(low, higher);

returns a (pseudo) random ``int``, satisfying ``low <= n < higher``.
If you select ``low`` and ``higher`` as 0 and 2, 
so there are only two possible values for n,
then you can choose to print ``Heads`` or ``Tails`` with an
|if-else| statement based on the result.

.. warning::

   We have discovered some problems with the ``Next()`` implementation
   when running on Mono that sometimes results in random values not
   being generated. This is likely a bug that will be fixed. If you
   experience any problems with ``Next()``, the following is for you!

An alternative to generating random 0 and 1 values for heads and tails
is to generate random double-precision values. Using the same
variable, ``r``, you can call ``r.NextDouble()`` to get a random value
between 0 and 1. You can consider any generated value :math:`n < 0.5` to
be heads; :math:`n >= 0.5` represents tails::

    double n = r.NextDouble();
    if (n < 0.5) {
       // heads
    } else {
       // tails
    }
    
In your ``Main`` method have a ``for`` loop calling  ``Flip()``
10 times to test it, so you generate a random sequence of 
10 heads and/or tails.  With these 10 rapid calls, it is important
that a new Random object is only created once.  The suggested static
variable declaration ensures that.


.. index:: exercise; GroupFlips

Group Flips 
-------------

Write a program ``format_flips.cs``. It should include the function ``Flip()``
and the ``static`` ``Random`` declaration 
from the last exercise.  Also include another function::
 
   /// Print out the results from the total number of random flips of a coin.
   /// Group them groupSize per line, each followed by a space.
   /// The last line may contain fewer than groupSize flips 
   /// if total is not a multiple of groupSize.  The last line
   /// should be followed by exactly one newline in all cases.
   /// For example, GroupFlips(10, 4) *could* produce:
   ///   Heads Heads Tails Heads 
   ///   Heads Tails Heads Tails
   ///   Tails Tails 
   static void GroupFlips(int total, int groupSize)

Complete this function definition and test 
with a variety of calls to ``GroupFlips`` in ``Main``.  
The output from the previous exercise would be produced by the call::

    GroupFlips(10, 1);
    
.. index:: exercise; reverse string foreach

.. _reverse-string-foreach:
  
Reverse String ``foreach`` 
---------------------------

We already have discussed :ref:`reverse-string-returned`.
It used a ``for`` loop to go through the characters in
reverse order.  Write a version with the only loop heading::

   foreach(char ch in s) {
   
and no reference to indices in s.


.. index:: exercise; only letters
   only letters exercise; 

.. _only-letters-ex:
  
Only Letters Exercise
~~~~~~~~~~~~~~~~~~~~~~~~~

Write a program that defines and tests a function with
description and heading::

    /// Return s with all non-letters removed.
    /// For example OnlyLetters("Hello, World!") returns "HelloWorld".
    static string OnlyLetters(string s)

Assume the English alphabet.
    
.. index:: exercise; palindrome
   palindrome exercise; 

.. _palindrome-ex:
  
Palindrome Exercise
~~~~~~~~~~~~~~~~~~~~~~~~~

Write a program ``palindrome.cs`` that defines and tests a function with
description and heading::

    /// Return true when s is a palindrome.
    /// For example IsPalindrome("A Toyota!") returns true.
    static bool IsPalindrome(string s)
  
A palindrome is a string that contains the same sequence of letters,
ignoring capitalization, forward and backward.  Non-letters are ignored.
Examples are "Madam, I'm Adam." and "Able was I 'ere I saw Elba."

``IsPalindrome`` can be written very concisely by copying and using
functions from previous exercises.

.. index:: exercise; nested play computer


Predict what these code fragments print.  Then check yourself in csharp::

    for (int i = 3; i > 0; i--) {
        for (int j = i; j < 4; j++) {
            Console.Write(j);
        }
        Console.WriteLine();
    }
        
    string s = "abcdef";    
    for (int i = 1; i < s.Length; i += 2) {
        for (int k = 0; k < i; k++) {
            Console.Write(s[i]);
        }
    }

.. index:: exercise; power table

.. _power_table_exercise:

Power Table Exercise
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
a.  Write a program :file:`power_table.cs` that completes and tests 
    the function with this heading.  Be sure your program tests 
    with several values for each parameter::

       /// Print a table of powers of positive integers.  
       /// Assume 1 <= nMax <= 12, 1 <= powerMax <= 7. 
       /// Example: output of PowerTable(3, 4)
       ///       n^1       n^2      n^3      n^4
       ///         1         1        1        1
       ///         2         4        8       16
       ///         3         9       27       81     
       ///
       public static void PowerTable(int nMax, int powerMax) 
   
    Make sure the table always ends up with right-justified columns.

b.  Make the table have columns all the same width, but
    make the width be as small as possible for the parameters
    provided, leaving a minimal one space (but not less!) between columns
    somewhere in the table. Consider heading widths, too.
