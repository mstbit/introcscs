.. index::
   single: labs; division sentences

.. _lab-division:

Lab: Division Sentences
=======================

Overview
--------

In this lab, we're going to begin to look at what makes computers *do
their thing* so to speak. 

It is rather insightful to look at how Wikipedia summarizes the
computer:

    A computer is a programmable machine designed to sequentially and
    automatically carry out a sequence of arithmetic or logical
    operations. The particular sequence of operations can be changed
    readily, allowing the computer to solve more than one kind of
    problem.

In other words, a computer is a calculator--and much
more. Furthermore, the definition of a computer goes on to include
access to storage and peripherals, such as consoles (graphical displays),
printers, and the network. We already got a glimpse of this access
when we explored ``Console.WriteLine`` in the first lab exercise.

We have discussed all the syntax and concepts needed in recent sections
on :ref:`arithmetic`, :ref:`Variables-and-Assignment`,
:ref:`io`, and :ref:`cast`.  Also you can make things easier for yourself using
:ref:`substitution-in-writeline` to format output.

Before writing your final program, you might like to review some of 
the parts, testing in the :ref:`csharp` program, so you get immediate feedback
for the calculations.

Requirements
------------

We want to develop a program that can do the following:

- Prompt the user for input of two integers, which we will call
  *numerator* and *denominator*. For clarity, we are only looking at
  integers, because this assignment is about rational numbers. A
  rational number can always be expressed as a quotient of two integers.

- Calculate the floating point division result (e.g. 10/4 = 2.5).

- Calculate the quotient and the remainder (e.g. 10/4 = 2 with a
  remainder of 2 = 2 2/4).

Your final program should work as in this sample run, and use the same 
labeled format:

.. code-block:: none

   Please enter the numerator? 14
   Please enter the denominator? 4
   Integer division result = 3 with a remainder 2
   Floating point division result = 3.5
   The result as a mixed fraction is 3 2/4.

For this lab the example format ``3 2/4`` is sufficient.
It would look better as ``3 1/2``, but a general 
efficient way to reduce fractions to
lowest terms is not covered until the section on the algorithm :ref:`gcd`.  

To do the part requiring a decimal quotient you are going to need to have a 
``double`` value, though your original data was of type ``int``.
You could use the approach in :ref:`cast`, with an explicit cast.
Another approach mentioned in that section was to do the cast implicitly
in a ``double`` declaration with initialization from an ``int``.  If we
already had ``int`` variables, ``numerator`` and 
``denominator``, that were previously assigned their values, 
we could use::

    double numeratorDouble = numerator; // implicit cast
    double quotientDouble = numeratorDouble/denominator;
    ...

Remember: at least one operand in a quotient must be ``double`` 
to get a ``double`` result.
    
To help you
get started with your program code, 
we provided this simple *stub* in the example file
:repsrc:`do_the_math_stub/do_the_math.cs`. 
You are encouraged to copy this into your own project as reviewed 
after the lab in :ref:`xamarinstudio-reminders`.

.. index:: comment
   single: /* ... */ comment
   single: */ end /* comment
   single: // comment

The body of ``Main`` presently contains only *comments*, skipped by the compiler.  
We illustrate two forms (being inconsistent for your information only):

* ``//`` to the end of the *same* line
* ``/*`` to ``*/`` through any number of lines.

Save the stub in a project of
your own and replace the comments with your code to complete it:

.. literalinclude:: ../../examples/introcs/do_the_math_stub/do_the_math.cs
     


    