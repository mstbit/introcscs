.. _io:

Input and Output
==========================

.. tip::Â¶

    Save the file before ``dotnet run``.
    Use ``dotnet build`` or ``dotnet build`` *ProjectName* when needed. 


.. index:: 
   double: Console; ReadLine
   
.. _read-from-console:
   
Input: Reading from the Keyboard
----------------------------------

At console or terminal, input is done in two parts: Prompt and read. 
Because the lack of better visual cues, we use a *prompt* to instruct the user 
how to respond. For example: ::

    Console.Write("Enter your name: ");
    
The user input from keyboard is automatically shown
in the terminal or console window. For a program to take in the characters typed, 
another function in the ``Console`` class is used:
``Console.ReadLine``.

The read function reads the data from a line typed at the keyboard by the user.
When the user presses the Enter (Return) key, the sequence of characters,
form the string *value* of the read function.

With any function producing a value, the value is *lost* unless it 
is *immediately* used. We therefore assign the value from the read function 
to a variable like in ::

    string name;                                // declare variable
    
    Console.WriteLine("Enter your name: ");     // prompt for input
    name = Console.ReadLine();                  // save value to variable

or read in one line ::

    Console.WriteLine("Enter your name: ");
    string name = Console.ReadLine();

    Console.WriteLine(name);                    // print to test

Now we have a variable containing the value for us to operate on. 
     

.. index::
   string; Parse to int or double
   Parse int and double
   int; Parse
   double; Parse
   


Casting (Type Conversion) in Input
-----------------------------------

The default value from ``Console.ReadLine()`` is of string type and 
when we want the user to supply numbers, we need to explicitly convert the 
strings to the proper kind of number. We cannot convert the string type to 
int implicitly because strings are immutable in C#. Instead, you need to parse 
the string and assign to the intended data type. 

There are C# built-in functions to do that. ``int.Parse`` takes a string parameter
that should be the characters in an ``int``, like "123" or "-25", and 
produces the corresponding ``int`` value, like 123 or -25: ::

    Console.WriteLine("Enter your age: ");      // prompt
    var ageInput = Console.ReadLine();          // save input to variable
    
    Console.WriteLine(ageInput.GetType());      // check type: string
    Console.WriteLine(ageInput);
    
    int age = int.Parse(ageInput);               // casting type to int
    
    Console.WriteLine(age.GetType());
    Console.WriteLine(age);

The double type works similarly as the int type::
    
    > string s = "34.5";
    > double d = double.Parse(s);
    > d
    34.5

or, in VS Code::

    string s = "34.5";
    double d = double.Parse(s);
    Console.WriteLine(d);


.. _substitution-in-writeline:

Console.WriteLine() 
-----------------------

The method ``Console.Write()`` does not create a new line when executing. 
We can make use of this in cases such as reading user input ::

    string firstName;

    Console.Write("Enter you first name: ");    // input will start here
    firstName = Console.ReadLine();

    Console.WriteLine("Hiya, " + firstName + "!");


You have seen output ("print" or "echo") from the very beginning when creating 
the console app project (``dotnet console new``) and see the executing line of::

    Console.WriteLine("Hello, World");

Naturally, we can print variables in addition to the string literal. For example, 
extending our input code::

    Console.WriteLine("Enter your name: ");
    string name = Console.ReadLine();

    Console.WriteLine("Hello," + name);        // use + for concatenation


.. _Format-Strings:

Composite formatting
-----------------------

Instead of inserting user input with the ``+`` operator, format strings (the 
"fill-in-the-braces") gives us better control over output using ``Console.WriteLine``.

Observe the last two statements:: 

    string firstName;

    Console.Write("Enter you first name: ");    // input will start here
    firstName = Console.ReadLine();

    Console.WriteLine("Hiya, " + firstName + "!");
    Console.WriteLine("Hiya, {0}!", firstName);

You can imagine that there would be {1} and {2}... like this::

        Console.WriteLine("My first name is {0} and my last name is {1}.", firstName, lastName);

With composite formatting, we have the flexibility of writing the output string 
and place the variables anywhere we prefer in the string.  


String interpolation using $
------------------------------
The remaining parameters, after the initial string, 
give the values to be substituted.  To
know *which* further parameter to substitute, the parameters after the
initial string are implicitly numbered,
*starting from 0*.  
Starting with 0 is consistent with other numbering sequences in C#.
So here, where there is just one value to substitute (``name``), it gets the index 0,
and where it is substituted, the braces get 0 inside, to indicate
that parameter with index 0 is to be substituted.

Everything in the initial string that is *outside* the braces is just
*repeated verbatim*.  In particular, if the only parameter is a string 
with no braces, it is printed completely
verbatim (reducing to the situations where we have used ``Console.WriteLine`` before).

A more elaborate silly examples that you could test in csharp would be::

    string first = "Peter";
    string last = "Piper";
    string what = "pick";
    Console.WriteLine("{0} {1}, {0} {1}, {2}.", first, last, what);
    
It would print::

    Peter Piper, Peter Piper, pick.
    
where parameter 0 is ``first`` (value ``"Peter"``), 
parameter 1 is ``last`` ( value ``"Piper"``), and
parameter 2 is ``what`` (value ``"pick"``).  

Make sure you see why the given output is exactly what is printed.

Or try in csharp::

    int x = 7;
    int y = 5;
    Console.WriteLine("{0} plus {1} is {2}; {0} times {1} is {3}.", x, y, x+y, x*y);
    
and see it print:

.. code-block:: none

    7 plus 5 is 12; 7 times 5 is 35.
    
Note the following features of the parameters after the first string:

- These parameters can be any expression, 
  and the expressions get evaluated before printing.
- These parameters to be substituted can be of any type. 
- These parameters are automatically converted to a string form, just as in the
  use of the string ``+`` operation.  
  
In fact the simple use of format strings
shown so far can be completed replaced by long expressions with ``+``,
if that is your taste.  We later discusses fancier formatting in :ref:`tables`,
that *cannot* be duplicated with a simple string ``+`` operation.
We will use the simple numbered substitutions for now just  
to get used to the idea of substitution.

.. index:: format; literal {}
    
A technical point: Since braces have special meaning in a format
string, there must be a special rule if you want braces to actually
be included in the final *formatted* string. The rule is to double
the braces: ``"{{"`` and ``"}}"``. The fragment ::

    int a = 2, b = 3;
    Console.WriteLine("The set is {{{0}, {1}}}.", a, b);

produces

.. code-block:: none

    The set is {2, 3}.

Note:  Braces only get their special meaning if there are at least two
parameters (forcing the first parameter to be a format string).
If there is just a single parameter, 
braces are interpreted as regular characters.

Format Reading Exercise
~~~~~~~~~~~~~~~~~~~~~~~~~~

What is printed?  ::

        Console.WriteLine("{0}{1}{1}{2}", "Mi", "ssi", "ppi");
        
Check yourself.
   
.. _QuotientFormat:

Exercise for Format
~~~~~~~~~~~~~~~~~~~~~~~

Write a program, ``quotient_format.cs``, that behaves like
:ref:`QuotientProblem`, but generate the sentence using 
``Console.WriteLine`` with a format string and no ``+`` operator.


Madlib Exercise 
~~~~~~~~~~~~~~~~~~~~~~~

Write a program, ``my_mad_lib.cs``, that prompts the user for
words that fit specified gramatical patterns ( a noun, a verb, a color,
a city....) and plug them into a multiline format string so they fit
grammatically, and
print the usually silly result.  
If you are not used to mad libs, try running (not 
looking at the source code) the example project mad_lib, and then try it 
again with different data.
If this exercise seems like too big of a challenge yet,
see our example source code, 
:repsrc:`mad_lib/mad_lib.cs`, and then *start over* on your own.



   
Writing to the Console
------------------------
   
In csharprepl, you can type an expression and immediately see the result 
of its evaluation. This is good for test out syntax. In a regular C# program 
run from a file like in you must explicitly give instructions to print to a 
console/terminal.  

This printing is accomplished through a function with a long name: ``Console.WriteLine``.
Like with math, you can pass a function a value to work on, by placing it in
parentheses after the name of the function.


``Console`` is a C# class maintained by the system, that
interacts with the terminal or console window where text output 
appears for the program.  A function defined in that class is ``WriteLine``.
To refer to a function like ``WriteLine`` in a different class, you must indicate
the location of the function with the "dot" notation shown:
class name, then ``.``, then the function.  This  
gives the more elaborate name needed in the program.




.. index:: Console; Write

The ``Console.WriteLine`` function automatically makes the printing
position advance to the next line, as when you press the Enter or Return key.
A variant, ``Console.Write``, prints the parameter exactly, and nothing else.
